name: Test HackingHelper Installation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  test-in-container:
    name: Build & Test on ${{ matrix.os.name }} (${{ matrix.user }}, ${{ matrix.folder }} on ${{ matrix.desktop }}) with ${{ matrix.execute_command_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        os:
          # - { name: "Ubuntu Latest", image: "ubuntu:latest", image_tag: "ubuntu-latest" }
          # - { name: "Ubuntu 22.04",  image: "ubuntu:22.04", image_tag: "ubuntu-22-04" }
          # - { name: "Ubuntu 20.04",  image: "ubuntu:20.04", image_tag: "ubuntu-20-04" }
          - { name: "Kali Rolling",  image: "kalilinux/kali-rolling", image_tag: "kali-rolling" }
          - { name: "Kali Last Release", image: "kalilinux/kali-last-release", image_tag: "kali-last-release" }
        user: [testuser, root]
        folder: ["/opt/rofiHackingHelper", "/tmp/rofiHackingHelper"]
        desktop: ["kali-desktop-gnome", "kali-desktop-xfce"]
        execute_command_type: ['paste', 'type', 'echo']

    steps:
      # Step 1: Checkout the code (from PR or push)
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Build Docker image and Run Test
      - name: Build Docker image and Run Test (${{ matrix.os.image }}, ${{ matrix.user }}), ${{ matrix.folder }} on ${{ matrix.desktop }}) with ${{ matrix.execute_command_type }}
        shell: 'script -q -e -c "bash {0}"'
        run: |
          set -ex
          BASE_IMAGE="${{ matrix.os.image }}"
          USER_CONTEXT="${{ matrix.user }}"
          TEMP_IMAGE_TAG="hacking-helper-test-${{ github.run_id }}-${{ matrix.desktop }}-${{ matrix.os.image_tag }}-${USER_CONTEXT}-${{ matrix.execute_command_type }}"

          echo "--- Generating Dockerfile for ${BASE_IMAGE} (${USER_CONTEXT}) ---"

          # Conditionally add user setup and switch USER instruction
          DOCKER_FILE=".docker/${USER_CONTEXT}.Dockerfile"

          echo "Replacing placeholders..."
          sed -i  -e "s|__BASE_IMAGE__|${BASE_IMAGE}|g"  "${DOCKER_FILE}"
          sed -i  -e "s|__KALI_DESKTOP__|${{ matrix.desktop }}|g" "${DOCKER_FILE}"

          echo "Building temporary image: ${TEMP_IMAGE_TAG}"
          docker build --no-cache -t "${TEMP_IMAGE_TAG}" -f "${DOCKER_FILE}" .

          echo "start docker container"
          docker run -id --name "${TEMP_IMAGE_TAG}" \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}"

          echo "wait till docker container is fully started"
          until [ "`docker inspect -f {{.State.Running}} "${TEMP_IMAGE_TAG}"`"=="true" ]; do
              sleep 0.1;
          done;
          echo  "docker inspect: `docker inspect "${TEMP_IMAGE_TAG}"`"

          echo "install hacking helper"
          docker exec -it \
            -e DISPLAY=:99 \
            -e TERM=xterm-256color \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}" \
            bash -c "set -ex; bash /tmp/git_source/install.sh \"${{ matrix.folder }}\" \"0\""

          echo "change SETTING_EXECUTE_COMMAND_TYPE to ${{ matrix.execute_command_type }}"
          docker exec -it \
            -e DISPLAY=:99 \
            -e TERM=xterm-256color \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}" \
            bash -c "set -ex; sed -e 's|SETTING_EXECUTE_COMMAND_TYPE=\"paste\"|SETTING_EXECUTE_COMMAND_TYPE=\"${{ matrix.execute_command_type }}\"|g' /tmp/git_source/code/xdotool/settings_example.sh > /tmp/git_source/code/xdotool/settings.sh"

          echo "show paste_commands.sh"
          docker exec -it \
            -e DISPLAY=:99 \
            -e TERM=xterm-256color \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}" \
            bash -c "cat /tmp/git_source/code/xdotool/helpers/paste_commands.sh"

          echo "test env.sh"
          docker exec -it \
            -e DISPLAY=:99 \
            -e TERM=xterm-256color \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}" \
            bash -c "source /tmp/git_source/code/xdotool/env.sh"

          echo "test get kali ip"
          docker exec -it \
            -e DISPLAY=:99 \
            -e TERM=xterm-256color \
            -u "${USER_CONTEXT}":"${USER_CONTEXT}" \
            "${TEMP_IMAGE_TAG}" \
            bash -c "set -ex; source /tmp/git_source/code/xdotool/env.sh && source /tmp/git_source/code/xdotool/scripts/get_kali_ip.sh"

          docker stop "${TEMP_IMAGE_TAG}" || echo "Container already stopped or not found."
          docker rm -fl "${TEMP_IMAGE_TAG}" || echo "Container already removed or not found."

          echo "--- Test completed successfully for ${USER_CONTEXT} in ${BASE_IMAGE} ---"
